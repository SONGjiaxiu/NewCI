#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
This module main function.
"""
import linecache
import string
import os
import math
import time
import networkx as nx
import matplotlib.pyplot as plt
import Optimal_Network_Attack as Optimal_Network_Attack
import Network_Generator as Net_Generator
import Louvain_community as lw

#*****************************************************

def Remove_Outliers(G):
    total = 1
    while total > 0:
        total = 0
        for nid in G.nodes():
            if G.degree(nid) == 1:
                G.remove_node(nid)
                total = total + 1
        #end for
    #end while
    return G
#*****************************************************

def Optimal_Percolation(G):

    #基于初始网络结构节点重要性的攻击
    '''
    print "degree_centrality"
    Gn = G.copy()
    Degree_Simultaneous_Attack = Optimal_Percolation_Simultaneous_Attack(Gn, "degree_centrality")
    print "Degree_Mass_Centrality"
    Gn = G.copy()
    Degree_Mass_Simultaneous_Attack = Optimal_Percolation_Simultaneous_Attack(Gn, "degree_mass_Centrality")
    print "between_centrality"
    Gn = G.copy()
    Bet_Simultaneous_Attack = Optimal_Percolation_Simultaneous_Attack(Gn, "between_centrality")
    print "closeness_centrality"
    Gn = G.copy()
    Closeness_Simultaneous_Attack = Optimal_Percolation_Simultaneous_Attack(Gn, "closeness_centrality")
    print "KShell_centrality"
    Gn = G.copy()
    KShell_Simultaneous_Attack = Optimal_Percolation_Simultaneous_Attack(Gn, "kshell_centrality")
    print "Eigen_Centrality"
    Gn = G.copy()
    Eigen_Simultaneous_Attack = Optimal_Percolation_Simultaneous_Attack(Gn, "eigen_centrality")
    print "collective_influence"
    Gn = G.copy()
    CI_Simultaneous_Attack = Optimal_Percolation_Simultaneous_Attack(Gn, "collective_influence")
    print "enhanced_collective_centrality"
    Gn = G.copy()
    ECI_Simultaneous_Attack = Optimal_Percolation_Simultaneous_Attack(Gn, "enhanced_collective_centrality")
    print "Hybrid_Diffusion_Centrality"
    Gn = G.copy()
    Hybrid_Diffusion_Simultaneous_Attack = Optimal_Percolation_Simultaneous_Attack(Gn, "hybrid_diffusion_centrality")
    '''

    #基于迭代时更新节点重要性的攻击
    #print "degree_centrality"
    #Gn = G.copy()
    #Degree_Sequence_Attack, Degree_Component_Num_List = Optimal_Network_Attack.Optimal_Percolation_Simultaneous_Attack(Gn, "degree_centrality")
    #print "Degree_Mass_Centrality"
    #Gn = G.copy()
    #Degree_Mass_Sequence_Attack = Optimal_Network_Attack.Optimal_Percolation_Simultaneous_Attack(Gn, "degree_mass_Centrality")
    print "between_centrality"
    Gn = G.copy()
    Bet_Sequence_Attack, Bet_Component_Num_List = Optimal_Network_Attack.Optimal_Percolation_Simultaneous_Attack(Gn, "between_centrality")
    #print "closeness_centrality"
    #Gn = G.copy()
    #Closeness_Sequence_Attack = Optimal_Network_Attack.Optimal_Percolation_Simultaneous_Attack(Gn, "closeness_centrality")
    print "KShell_centrality"
    Gn = G.copy()
    KShell_Sequence_Attack, KShell_Component_Num_List = Optimal_Network_Attack.Optimal_Percolation_Simultaneous_Attack(Gn, "kshell_centrality")
    print "Eigen_Centrality"
    Gn = G.copy()
    Eigen_Sequence_Attack, Eigen_Component_Num_List = Optimal_Network_Attack.Optimal_Percolation_Simultaneous_Attack(Gn, "eigen_centrality")
    print "collective_influence"
    Gn = G.copy()
    CI_Sequence_Attack, CI_Component_Num_List = Optimal_Network_Attack.Optimal_Percolation_Simultaneous_Attack(Gn, "collective_influence")
    print "enhanced_collective_centrality"
    Gn = G.copy()
    ECI_Sequence_Attack, ECI_Component_Num_List = Optimal_Network_Attack.Optimal_Percolation_Simultaneous_Attack(Gn, "enhanced_collective_centrality")
    #print "Hybrid_Diffusion_Centrality"
    #Gn = G.copy()
    #Hybrid_Diffusion_Sequence_Attack = Optimal_Network_Attack.Optimal_Percolation_Simultaneous_Attack(Gn, "hybrid_diffusion_centrality")


    #print "Degree_Sequence_Attack:", Degree_Sequence_Attack
    #print "Degree_Mass_Sequence_Attack:", Degree_Mass_Sequence_Attack
    print "Bet_Sequence_Attack:", Bet_Sequence_Attack
    #print "Closeness_Sequence_Attack:", Closeness_Sequence_Attack
    print "KShell_Sequence_Attack:", KShell_Sequence_Attack
    print "Eigen_Sequence_Attack:", Eigen_Sequence_Attack
    print "CI_Sequence_Attack:", CI_Sequence_Attack
    print "ECI_Sequence_Attack:", ECI_Sequence_Attack
    #print "Hybrid_Diffusion_Sequence_Attack:", Hybrid_Diffusion_Sequence_Attack

    #print "Degree_Component_Num_List:", Degree_Component_Num_List
    #print "Degree_Mass_Sequence_Attack:", Degree_Mass_Sequence_Attack
    print "Bet_Component_Num_List:", Bet_Component_Num_List
    #print "Closeness_Sequence_Attack:", Closeness_Sequence_Attack
    print "KShell_Component_Num_List:", KShell_Component_Num_List
    print "Eigen_Component_Num_List:", Eigen_Component_Num_List
    print "CI_Component_Num_List:", CI_Component_Num_List
    print "ECI_Component_Num_List:", ECI_Component_Num_List
    #print "Hybrid_Diffusion_Sequence_Attack:", Hybrid_Diffusion_Sequence_Attack

    #===================================================
    plt.figure(1)
    ax1 = plt.subplot(111)
    plt.sca(ax1)
    #x = list([(i+1) for i in range(0,len(Degree_Sequence_Attack))])
    #plt.plot(x, Degree_Sequence_Attack, "rs-")
    #x = list([(i+1) for i in range(0,len(Degree_Mass_Sequence_Attack))])
    #plt.plot(x, Degree_Mass_Sequence_Attack, "bD-")
    x = list([(i+1) for i in range(0,len(Bet_Sequence_Attack))])
    plt.plot(x, Bet_Sequence_Attack, "c+-")
    #x = list([(i+1) for i in range(0,len(Closeness_Sequence_Attack))])
    #plt.plot(x, Closeness_Sequence_Attack, "m*-")
    x = list([(i+1) for i in range(0,len(KShell_Sequence_Attack))])
    plt.plot(x, KShell_Sequence_Attack, "y^-")
    x = list([(i+1) for i in range(0,len(Eigen_Sequence_Attack))])
    plt.plot(x, Eigen_Sequence_Attack, "gp-")
    x = list([(i+1) for i in range(0,len(CI_Sequence_Attack))])
    plt.plot(x, CI_Sequence_Attack, "k.-")
    x = list([(i+1) for i in range(0,len(ECI_Sequence_Attack))])
    plt.plot(x, ECI_Sequence_Attack, "rx-")
    #x = list([(i+1) for i in range(0,len(Hybrid_Diffusion_Sequence_Attack))])
    #plt.plot(x, Hybrid_Diffusion_Sequence_Attack, "r8-")
    plt.title("Optimal Percolation under Sequence Attack")
    plt.ylabel("The fraction of giant component")
    plt.xlabel("Removed influencers")
    leg = plt.legend(('Bet','KShell','Eigen','CI','ECI'),'upper right')
    for t in leg.get_texts():
        t.set_fontsize(12)
    plt.title("SF_1")
    plt.show()


    plt.figure(1)
    ax1 = plt.subplot(111)
    plt.sca(ax1)
    #x = list([(i+1) for i in range(0,len(Degree_Component_Num_List))])
    #plt.plot(x, Degree_Component_Num_List, "rs-")
    x = list([(i+1) for i in range(0,len(Bet_Component_Num_List))])
    plt.plot(x, Bet_Component_Num_List, "c+-")
    x = list([(i+1) for i in range(0,len(KShell_Component_Num_List))])
    plt.plot(x, KShell_Component_Num_List, "y^-")
    x = list([(i+1) for i in range(0,len(Eigen_Component_Num_List))])
    plt.plot(x, Eigen_Component_Num_List, "gp-")
    x = list([(i+1) for i in range(0,len(CI_Component_Num_List))])
    plt.plot(x, CI_Component_Num_List, "k.-")
    x = list([(i+1) for i in range(0,len(ECI_Component_Num_List))])
    plt.plot(x, ECI_Component_Num_List, "rx-")
    #x = list([(i+1) for i in range(0,len(Hybrid_Diffusion_Sequence_Attack))])
    #plt.plot(x, Hybrid_Diffusion_Sequence_Attack, "r8-")
    plt.title("Optimal Percolation under Sequence Attack")
    plt.ylabel("ECI_Component_Num_List")
    plt.xlabel("Removed influencers")
    leg = plt.legend(('Bet','KShell','Eigen','CI','ECI'),'upper right')
    for t in leg.get_texts():
        t.set_fontsize(12)
    plt.title("SF_1")
    plt.show()


def Degree_function(G):
    Nodes = G.nodes()
    Degree_List = []
    Degree_Dic = {}
    for i in Nodes:
        Degree_List.append(G.degree(i))
    Degree_List = sorted(Degree_List, reverse = False)
    Flag = Degree_List[0]
    Count = 1
    for i in Degree_List[1:]:
        if i !=Flag:
            Degree_Dic[Flag] = Count
            Count = 1
            Flag = i
        else:
            Count = Count + 1
    #end for
    #print Degree_Dic
    n = G.number_of_nodes()
    plt.figure(1)
    ax1 = plt.subplot(111)
    plt.sca(ax1)
    #x = list([(i+1) for i in range(0,len(Degree_List))])
    x = sorted(Degree_Dic.keys(), reverse = False)
    y = []
    for i in x:
        y.append(float(Degree_Dic[i])/n)
    #end for
    plt.plot(x, y, "rs-")
    plt.ylabel("Probability")
    plt.xlabel("Degree K")
    plt.title("degree distribution")
    plt.show()
#************************************************************************
def Deconstruction_Increased():
    CI_Sequence_Attack= [3352, 3351, 3350, 3349, 3346, 3345, 3341, 3340, 3335, 3334, 3333, 3332, 3331, 3327, 3327, 3326, 3325, 3324, 3322, 3321, 3320, 3305, 3304, 3273, 3273, 3273, 3272, 3271, 3270, 3269, 3263, 3262, 3262, 3261, 3261, 3227, 3194, 3194, 3193, 3189, 3189, 3189, 3184, 3176, 3175, 3175, 3175, 3174, 3173, 3172, 3169, 3169, 3169, 3169, 3167, 3164, 3164, 3164, 3164, 3145, 3138, 3137, 3136, 3135, 3135, 3134, 3133, 3130, 3130, 3130, 3129, 3114, 3113, 3112, 3109, 3109, 3106, 2946, 2946, 2893, 2893, 2893, 2892, 2892, 2891, 2891, 2861, 2859, 2856, 2855, 2855, 2854, 2853, 2852, 2852, 2850, 2848, 2840, 2840, 2819, 2819, 2798, 2796, 2755, 2755, 2754, 2754, 2736, 2736, 2731, 2730, 2730, 2729, 2728, 2728, 2728, 2720, 2720, 2711, 2710, 2710, 2667, 2651, 2651, 2651, 2650, 2650, 2650, 2650, 2650, 2647, 2646, 2644, 2628, 2628, 2627, 2626, 2623, 2623, 2618, 2613, 2613, 2612, 2610, 2607, 2606, 2583, 2583, 2583, 2582, 2582, 2582, 2581, 2581, 2580, 2580, 2577, 2576, 2575, 2574, 2562, 2559, 2559, 2557, 2553, 2548, 2548, 2548, 2548, 2548, 2548, 2548, 2547, 2546, 2546, 2546, 2545, 2540, 2539, 2534, 2533, 2533, 2532, 2532, 2532, 2531, 2530, 2508, 2508, 2507, 2506, 2505, 2505, 2504, 2502, 2497, 2496, 2495, 2494, 2492, 2488, 2488, 2488, 2488, 2488, 2488, 2487, 2487, 2487, 2486, 2486, 2485, 2485, 2485, 2484, 2479, 2479, 2478, 2476, 2475, 2473, 2468, 2465, 2451, 2450, 2446, 2446, 2446, 2442, 2441, 2441, 2440, 2425, 2423, 2423, 2422, 2421, 2421, 2420, 2419, 2414, 2409, 2406, 2401, 2281, 2200, 2200, 2199, 2199, 2199, 2198, 2198, 2198, 2197, 2197, 2196, 2196, 2195, 2195, 2195, 2193, 2193, 2193, 2193, 2192, 2192, 2192, 2192, 2181, 2180, 2179, 2177, 2166, 2165, 2163, 2162, 2161, 2161, 2160, 2160, 2160, 2154, 2153, 2152, 2139, 2110, 2109, 2106, 2105, 2105, 2101, 2100, 2100, 2049, 2048, 2047, 2047, 2047, 2046, 2046, 2045, 2044, 2041, 2040, 2040, 2039, 2039, 2039, 1978, 1708, 1708, 1708, 1708, 1707, 1707, 1707, 1707, 1707, 1706, 1704, 1671, 1671, 1671, 1671, 1671, 1670, 1667, 1667, 1667, 1667, 1667, 1664, 1662, 1563, 1556, 1556, 1555, 1555, 1552, 1550, 1549, 1549, 1509, 1509, 1508, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1457, 1457, 1457, 1457, 1457, 1457, 1408, 1407, 1407, 1407, 1407, 1407, 1407, 1405, 1405, 1405, 1403, 1403, 1403, 1403, 1394, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1390, 1389, 1389, 1389, 1389, 1388, 1388, 1361, 1361, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1355, 1355, 1355, 1354, 1352, 1348, 1348, 1347, 1347, 1347, 1347, 1347, 1342, 1342, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1073, 1073, 1072, 1071, 1071, 1071, 1061, 1061, 1061, 1060, 1060, 1060, 1059, 1059, 1059, 1046, 1046, 1046, 1046, 1046, 1046, 1018, 1018, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1014, 1014, 1014, 1014, 1013, 1013, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 991, 991, 991, 991, 990, 990, 988, 987, 959, 959, 959, 959, 959, 959, 958, 958, 957, 957, 956, 956, 956, 956, 956, 956, 956, 956, 950, 950, 950, 950, 950, 950, 949, 949, 949, 949, 949, 949, 949, 942, 942, 942, 937, 937, 936, 936, 936, 936, 932, 932, 924, 924, 924, 920, 920, 920, 920, 920, 920, 895, 890, 890, 890, 890, 889, 889, 889, 886, 886, 886, 886, 886, 886, 885, 808, 808, 808, 808, 808, 808, 808, 808, 808, 808, 808, 807, 807, 804, 804, 804, 804, 804, 804, 804, 804, 804, 804, 804, 804, 803, 803, 803, 803, 803, 803, 803, 801, 801, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 528, 528, 528, 528, 527, 527, 527, 527, 527, 527, 527, 454, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 435, 435, 435, 435, 434, 434, 434, 429, 429, 429, 429, 405, 405, 405, 405, 405, 405, 405, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 391, 391, 391, 391, 391, 391, 389, 389, 389, 389, 389, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 387, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 329, 329, 311, 311, 311, 311, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 306, 306, 306, 306, 306, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 150, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 144, 144, 144, 144, 144, 144, 144, 144, 144, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 109, 109, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 103, 103, 103, 103, 103, 102, 102, 102, 102, 102, 100, 99, 99, 99, 99, 99, 99, 99, 99, 99, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15, 15, 15, 15, 15, 15, 15, 15, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
    ECI_Sequence_Attack= [3352, 3351, 3349, 3346, 3345, 3344, 3343, 3342, 3338, 3334, 3333, 3332, 3331, 3330, 3328, 3327, 3326, 3322, 3321, 3320, 3308, 3307, 3306, 3302, 3301, 3300, 3296, 3267, 3266, 3265, 3264, 3261, 3260, 3258, 3247, 3246, 3245, 3244, 3243, 3242, 3241, 3239, 3237, 3236, 3235, 3228, 3227, 3226, 3222, 3221, 3200, 3199, 3198, 3194, 3193, 3192, 3176, 3173, 3172, 2994, 2993, 2992, 2991, 2988, 2987, 2980, 2979, 2972, 2971, 2970, 2969, 2966, 2965, 2965, 2962, 2961, 2959, 2958, 2957, 2939, 2938, 2936, 2933, 2918, 2907, 2906, 2901, 2900, 2899, 2894, 2892, 2891, 2862, 2859, 2858, 2856, 2850, 2850, 2849, 2846, 2845, 2845, 2844, 2843, 2843, 2842, 2841, 2840, 2839, 2838, 2837, 2834, 2833, 2832, 2831, 2828, 2828, 2823, 2822, 2815, 2815, 2801, 2797, 2790, 2789, 2693, 2692, 2689, 2569, 2568, 2566, 2564, 2556, 2534, 2532, 2532, 2531, 2531, 2512, 2495, 2494, 2494, 2416, 2415, 2406, 2406, 2396, 2395, 2394, 2393, 2391, 2391, 2390, 2389, 2378, 2377, 2376, 2374, 2374, 2373, 2373, 2372, 2372, 2036, 2035, 2034, 2034, 2034, 2034, 2025, 2025, 2022, 2022, 2021, 2021, 2020, 1979, 1979, 1978, 1977, 1977, 1977, 1972, 1972, 1934, 1934, 1917, 1917, 1916, 1916, 1916, 1916, 1915, 1914, 1911, 1909, 1908, 1908, 1906, 1906, 1903, 1901, 1900, 1881, 1878, 1871, 1866, 1864, 1859, 1859, 1858, 1858, 1856, 1642, 1640, 1578, 1578, 1577, 1576, 1576, 1571, 1569, 1569, 1568, 1568, 1568, 1567, 1566, 1565, 1565, 1564, 1562, 1562, 1562, 1562, 1562, 1558, 1558, 1558, 1558, 1558, 1558, 1505, 1504, 1503, 1502, 1500, 1499, 1498, 1496, 1455, 1455, 1455, 1454, 1453, 1452, 1452, 1449, 1449, 1449, 1449, 1434, 721, 721, 721, 721, 721, 720, 720, 720, 719, 719, 719, 719, 719, 719, 719, 719, 717, 717, 717, 716, 688, 684, 656, 654, 654, 651, 651, 651, 651, 651, 650, 650, 650, 650, 650, 650, 650, 648, 645, 645, 645, 645, 645, 645, 600, 600, 600, 600, 600, 600, 600, 600, 600, 597, 597, 597, 597, 597, 597, 597, 566, 566, 566, 566, 566, 566, 566, 566, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 563, 563, 563, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 561, 561, 561, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 532, 532, 509, 509, 509, 509, 509, 509, 509, 509, 509, 470, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 464, 464, 464, 454, 454, 454, 454, 454, 432, 432, 430, 430, 430, 430, 430, 429, 429, 429, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 376, 376, 376, 376, 376, 376, 366, 366, 357, 357, 357, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 252, 252, 252, 252, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 111, 111, 111, 111, 106, 106, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 104, 104, 104, 104, 88, 88, 88, 88, 88, 88, 88, 88, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 64, 64, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 38, 38, 38, 38, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]

    Total_Giant_Component_CI =0
    Total_Giant_Component_ECI =0
    for i in range(0, len(CI_Sequence_Attack)):
        Total_Giant_Component_CI = Total_Giant_Component_CI + CI_Sequence_Attack[i]
    for i in range(0, len(ECI_Sequence_Attack)):
        Total_Giant_Component_ECI = Total_Giant_Component_ECI + ECI_Sequence_Attack[i]
    #end for
    Total_Giant_Component_Diff = Total_Giant_Component_ECI - Total_Giant_Component_CI
    print Total_Giant_Component_CI, Total_Giant_Component_ECI, Total_Giant_Component_Diff, float(Total_Giant_Component_Diff)/Total_Giant_Component_CI

#***********************************************************************

def cal_kendall_tau(list_1 , list_2):
    length = len(list_1)
    if length != len(list_2):
        return -1
    set_1 = set()
    set_2 = set()
    for i in range(length):
        for j in range(i+1,length):
            set_1.add( (list_1[i],list_1[j]) )
            set_2.add( (list_2[i],list_2[j]) )
    count = len(set_1 & set_2)
    return float(count)*2 / ((length-1)*length)
    '''
    k_avg_list = ['i', 'k', 'a', 'j', 'g', 'l', 'c', 'f', 'b', 'e', 'h', 'd']
    c_list = ['a', 'i', 'f', 'b', 'k', 'j', 'e', 'h', 'c', 'g', 'l', 'd']
    r_list = ['l', 'b', 'j', 'f', 'e', 'd', 'c', 'a', 'h', 'i', 'k', 'g']
    h_list = ['a', 'i', 'k', 'e', 'd', 'h', 'f', 'c', 'b', 'g', 'j', 'l']
    s_list = ['k', 'i', 'a', 'j', 'e', 'c', 'd', 'f', 'h', 'l', 'g', 'b']
    m_list = ['b', 'f', 'a', 'g', 'j', 'h', 'l', 'c', 'd', 'e', 'i', 'k']
    I_list = ['l', 'b', 'f', 'h', 'e', 'j', 'd', 'c', 'a', 'i', 'g', 'k']

    print 'sim of k_avg_list&I_list : %s' % cal_kendall_tau(I_list,k_avg_list)
    print 'sim of c_list&I_list : %s' % cal_kendall_tau(I_list,c_list)
    print 'sim of r_list&I_list : %s' % cal_kendall_tau(I_list,r_list)
    print 'sim of h_list&I_list : %s' % cal_kendall_tau(I_list,h_list)
    print 'sim of s_list&I_list : %s' % cal_kendall_tau(I_list,s_list)
    print 'sim of m_list&I_list : %s' % cal_kendall_tau(I_list,m_list)
    '''




#*************************************************************************
if __name__ == '__main__':
    '''
    G = nx.Graph()
    G.add_edges_from([('1', '3'), ('1', '4'), ('2', '3'), ('2', '4'), ('2', '5'), ('3', '4'),  ('3', '6'), ('4', '5'), ('4', '6'),
        ('5', '22'), ('22', '7'), ('6', '23'), ('23', '14'),
        ('7', '8'), ('7', '9'), ('7', '10'), ('8', '9'), ('9', '10'), ('9', '11'),('9', '13'), ('10', '12'), ('10', '13'), ('11', '12'),
        ('11', '13'),
        ('14', '16'), ('14', '17'), ('15', '19'), ('15', '20'), ('16', '17'), ('16', '18'), ('16', '19'), ('17', '18'), ('17', '19'),
        ('17', '20'), ('18', '19'), ('19', '20'),
        ('8', '21'), ('21', '15'), ('1', '24'), ('20', '25')])
    '''
    k_avg_list = ['i', 'k', 'a', 'j', 'g', 'l', 'c', 'f', 'b', 'e', 'h', 'd']
    c_list = ['a', 'i', 'f', 'b', 'k', 'j', 'e', 'h', 'c', 'g', 'l', 'd']
    r_list = ['l', 'b', 'j', 'f', 'e', 'd', 'c', 'a', 'h', 'i', 'k', 'g']
    h_list = ['a', 'i', 'k', 'e', 'd', 'h', 'f', 'c', 'b', 'g', 'j', 'l']
    s_list = ['k', 'i', 'a', 'j', 'e', 'c', 'd', 'f', 'h', 'l', 'g', 'b']
    m_list = ['b', 'f', 'a', 'g', 'j', 'h', 'l', 'c', 'd', 'e', 'i', 'k']
    I_list = ['l', 'b', 'f', 'h', 'e', 'j', 'd', 'c', 'a', 'i', 'g', 'k']

    print 'sim of k_avg_list&I_list : %s' % cal_kendall_tau(I_list,k_avg_list)
    print 'sim of c_list&I_list : %s' % cal_kendall_tau(I_list,c_list)
    print 'sim of r_list&I_list : %s' % cal_kendall_tau(I_list,r_list)
    print 'sim of h_list&I_list : %s' % cal_kendall_tau(I_list,h_list)
    print 'sim of s_list&I_list : %s' % cal_kendall_tau(I_list,s_list)
    print 'sim of m_list&I_list : %s' % cal_kendall_tau(I_list,m_list)






    #产生网络数据
    #G = Net_Generator.LFR_Community_Generator('LFR_7.txt')#fname = 'LFR_4.txt'
    #G = Net_Generator.SF_Generateor(400, 5)#G = Net_Generator.
    #G = Net_Generator.ER_Generateor(1000, 3000)#G = Net_Generator.
    #Edge = G.edges()
    #Edge = Net_Generator.ReadTxtData('Routers.txt') #DivideGmlData(fname), ReadGmlData(fname)
    #Net_Generator.DivideGmlData('./Dataset/netscience.gml')
    #Edge = Net_Generator.ReadGmlData('power.gml')

    #创建图
    '''
    G = nx.Graph()
    G.add_edges_from(Edge)
    print "N,M:",G.number_of_nodes(),G.number_of_edges()
    #Degree_function(G)
    G = Remove_Outliers(G)
    #针对动力学过程的centrality性能测试
    partition = lw.best_partition(G)
    print "Louvain Modularity: ", lw.modularity(partition, G)
    Net_Generator.Attributes_of_Graph(G)
    #Optimal_Percolation(G)
    '''


    '''
    pos=nx.spring_layout(G)
    nx.draw_networkx_edges(G, pos, alpha=0.4)
    #nx.draw_networkx_labels(G, pos, font_size=16, font_family='sans-serif')
    nx.draw_networkx_nodes(G, pos, nodelist=G.nodes(), node_size=10, alpha=0.4,  node_color= 'red')
    plt.title("Network Community Analysis")
    plt.show()
    #colorList = ['SeaGreen','skyblue','GreenYellow','cyan','yellow','brown','pink','Salmon','red','c','magenta','orange','purple','blue','green','white','black','y']#,'aqua'
    '''


    #CI_Sequence_Attack= [381, 380, 379, 378, 377, 376, 375, 374, 373, 369, 368, 366, 365, 364, 362, 361, 360, 359, 358, 357, 356, 355, 354, 351, 349, 347, 346, 345, 344, 343, 342, 341, 340, 338, 337, 336, 335, 333, 332, 331, 330, 329, 328, 327, 326, 325, 324, 323, 320, 318, 317, 317, 316, 312, 310, 308, 307, 303, 302, 296, 295, 294, 293, 292, 288, 288, 286, 285, 284, 283, 282, 281, 279, 276, 275, 272, 271, 271, 270, 269, 267, 265, 264, 259, 257, 256, 255, 253, 252, 249, 247, 245, 245, 244, 243, 241, 240, 237, 235, 235, 235, 232, 223, 223, 212, 210, 210, 209, 204, 203, 200, 198, 196, 194, 193, 192, 192, 187, 186, 184, 184, 171, 167, 167, 165, 165, 165, 164, 163, 163, 162, 161, 161, 159, 159, 153, 153, 153, 153, 152, 134, 134, 134, 134, 131, 131, 131, 131, 130, 130, 130, 127, 127, 127, 125, 125, 123, 121, 120, 120, 119, 118, 118, 118, 118, 118, 116, 116, 114, 112, 112, 108, 108, 108, 98, 89, 85, 85, 85, 83, 83, 81, 77, 76, 76, 76, 76, 76, 76, 76, 74, 74, 74, 74, 74, 74, 74, 74, 73, 73, 73, 73, 73, 72, 72, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 70, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 45, 45, 45, 45, 45, 44, 44, 44, 44, 43, 29, 29, 29, 29, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 22, 21, 21, 21, 21, 20, 20, 20, 20, 20, 20, 19, 19, 19, 17, 17, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
    #ECI_Sequence_Attack= [381, 380, 379, 378, 377, 376, 375, 374, 373, 372, 371, 370, 369, 368, 367, 366, 365, 363, 362, 358, 357, 356, 355, 354, 353, 352, 351, 350, 348, 347, 346, 345, 344, 343, 342, 341, 340, 339, 338, 336, 335, 334, 333, 332, 330, 327, 326, 322, 321, 320, 318, 314, 313, 312, 307, 306, 305, 303, 299, 298, 297, 296, 295, 294, 292, 291, 283, 281, 280, 278, 277, 276, 275, 273, 272, 271, 270, 269, 264, 263, 256, 254, 252, 249, 243, 242, 241, 233, 228, 228, 227, 226, 224, 223, 222, 215, 212, 210, 210, 205, 204, 200, 198, 195, 188, 185, 184, 180, 168, 167, 161, 157, 152, 145, 145, 136, 128, 128, 128, 127, 127, 109, 107, 106, 105, 105, 105, 104, 85, 85, 59, 59, 58, 57, 57, 57, 57, 57, 57, 57, 56, 56, 56, 50, 50, 50, 50, 50, 41, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]




